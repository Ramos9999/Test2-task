{"version":3,"names":["_getJestObj","mock","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_interopRequireDefault","require","_react","_react2","_","default","createElement","jest","mockData","avatar_url","login","name","description","languages_url","html_url","forks_url","describe","it","container","render","element","slug","expect","querySelector","toBeDefined","screen","getByTestId","toHaveTextContent"],"sources":["EntryContainer.test.tsx"],"sourcesContent":["/* eslint-disable react/display-name */\r\nimport React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\n\r\nimport EntryContainer from '.';\r\n\r\nconst mockData = {\r\n  avatar_url: 'http://avatar.jpj',\r\n  login: 'mock username',\r\n  name: 'mock name',\r\n  description: 'mock description',\r\n  languages_url: 'mock language',\r\n  html_url: 'mock url profile',\r\n  forks_url: 'mcok forks data',\r\n};\r\n\r\njest.mock('../Badges', () => () => <div data-testid=\"badges\" />);\r\njest.mock('..//Forks', () => () => <div data-testid=\"forks\" />);\r\n\r\ndescribe('EntryContainer', () => {\r\n  it('should render correctly', () => {\r\n    const { container } = render(\r\n      <EntryContainer element={mockData} slug=\"users\" />,\r\n    );\r\n\r\n    expect(container.querySelector('.container')).toBeDefined();\r\n    expect(container.querySelector('.avatarImage')).toBeDefined();\r\n    expect(container.querySelector('.username')).toBeDefined();\r\n    expect(container.querySelector('.description')).toBeDefined();\r\n    expect(container.querySelector('.avatarImage')).toBeDefined();\r\n    expect(screen.getByTestId('badges')).toBeDefined();\r\n    expect(screen.getByTestId('forks')).toBeDefined();\r\n    expect(container.querySelector('.goToProfile')).toHaveTextContent(\r\n      'Go to profile',\r\n    );\r\n  });\r\n\r\n  it('should render with button text go to repository', () => {\r\n    const { container } = render(\r\n      <EntryContainer element={mockData} slug=\"repositories\" />,\r\n    );\r\n\r\n    expect(container.querySelector('.goToProfile')).toHaveTextContent(\r\n      'Go to repository',\r\n    );\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}