82243b5aeedf0fc56f7bd42da4dcba73
/* istanbul ignore next */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var
/* istanbul ignore next */
_react = _interopRequireWildcard(require("react"));
var
/* istanbul ignore next */
_ForksModule = _interopRequireDefault(require("./Forks.module.scss"));
var
/* istanbul ignore next */
_fetcher = require("../../utils/fetcher");
/* istanbul ignore next */
var _jsxFileName = "C:\\Users\\DELL\\Desktop\\Test2-task\\components\\Forks\\index.tsx";
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var __jsx = _react.default.createElement;
function cov_xti19yhxy() {
  var path = "C:\\Users\\DELL\\Desktop\\Test2-task\\components\\Forks\\index.tsx";
  var hash = "c30c2225bb48495ef07f81a12f0ab999961eeb30";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\DELL\\Desktop\\Test2-task\\components\\Forks\\index.tsx",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 14
        },
        end: {
          line: 46,
          column: 1
        }
      },
      "1": {
        start: {
          line: 11,
          column: 28
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "2": {
        start: {
          line: 12,
          column: 35
        },
        end: {
          line: 12,
          column: 59
        }
      },
      "3": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "4": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 28
        }
      },
      "5": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 13
        }
      },
      "6": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 27,
          column: 7
        }
      },
      "7": {
        start: {
          line: 18,
          column: 6
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "8": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 24,
          column: 7
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 23,
          column: 21
        }
      },
      "10": {
        start: {
          line: 22,
          column: 10
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "11": {
        start: {
          line: 22,
          column: 35
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "12": {
        start: {
          line: 23,
          column: 15
        },
        end: {
          line: 23,
          column: 21
        }
      },
      "13": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 20
        }
      },
      "14": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 45,
          column: 4
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 38,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 14
          },
          end: {
            line: 10,
            column: 15
          }
        },
        loc: {
          start: {
            line: 10,
            column: 52
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 14,
            column: 13
          }
        },
        loc: {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 28,
            column: 3
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 26
          },
          end: {
            line: 17,
            column: 27
          }
        },
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 21
          },
          end: {
            line: 35,
            column: 22
          }
        },
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 38,
            column: 18
          }
        },
        line: 36
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 23,
            column: 21
          }
        }, {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 21
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 26
          }
        }, {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 21,
            column: 35
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 10
          },
          end: {
            line: 22,
            column: 67
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 10
          },
          end: {
            line: 22,
            column: 67
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 7
          },
          end: {
            line: 43,
            column: 7
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 40,
            column: 11
          }
        }, {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 13
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 7
          },
          end: {
            line: 32,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 7
          },
          end: {
            line: 32,
            column: 17
          }
        }, {
          start: {
            line: 32,
            column: 21
          },
          end: {
            line: 32,
            column: 37
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c30c2225bb48495ef07f81a12f0ab999961eeb30"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_xti19yhxy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xti19yhxy();
cov_xti19yhxy().s[0]++;
const Forks = ({
  forkUrl
}) => {
  /* istanbul ignore next */
  cov_xti19yhxy().f[0]++;
  const [forks, setForks] =
  /* istanbul ignore next */
  (cov_xti19yhxy().s[1]++,
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _react.
  /* istanbul ignore next */
  useState)([]));
  const [errorCall, seErrorCall] =
  /* istanbul ignore next */
  (cov_xti19yhxy().s[2]++,
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _react.
  /* istanbul ignore next */
  useState)(false));
  /* istanbul ignore next */
  cov_xti19yhxy().s[3]++;
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _react.
  /* istanbul ignore next */
  useEffect)(() => {
    /* istanbul ignore next */
    cov_xti19yhxy().f[1]++;
    const arr =
    /* istanbul ignore next */
    (cov_xti19yhxy().s[4]++, []);
    let i =
    /* istanbul ignore next */
    (cov_xti19yhxy().s[5]++, 0);
    /* istanbul ignore next */
    cov_xti19yhxy().s[6]++;
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _fetcher.
    /* istanbul ignore next */
    fetcher)(forkUrl).then(res => {
      /* istanbul ignore next */
      cov_xti19yhxy().f[2]++;
      cov_xti19yhxy().s[7]++;
      seErrorCall(Object.keys(res).includes('message'));
      /* istanbul ignore next */
      cov_xti19yhxy().s[8]++;
      while (true) {
        /* istanbul ignore next */
        cov_xti19yhxy().s[9]++;
        if (
        /* istanbul ignore next */
        (cov_xti19yhxy().b[1][0]++, i < res.length) &&
        /* istanbul ignore next */
        (cov_xti19yhxy().b[1][1]++, i < 3)) {
          /* istanbul ignore next */
          cov_xti19yhxy().b[0][0]++;
          cov_xti19yhxy().s[10]++;
          if (res[i]['full_name']) {
            /* istanbul ignore next */
            cov_xti19yhxy().b[2][0]++;
            cov_xti19yhxy().s[11]++;
            arr.push(res[i++]['full_name']);
          } else
          /* istanbul ignore next */
          {
            cov_xti19yhxy().b[2][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_xti19yhxy().b[0][1]++;
          cov_xti19yhxy().s[12]++;
          break;
        }
      }
      /* istanbul ignore next */
      cov_xti19yhxy().s[13]++;
      setForks(arr);
    });
  }, []);
  /* istanbul ignore next */
  cov_xti19yhxy().s[14]++;
  return /* istanbul ignore next */__jsx(
  /* istanbul ignore next */
  "div",
  /* istanbul ignore next */
  {
    className:
    /* istanbul ignore next */
    _ForksModule.
    /* istanbul ignore next */
    default.container,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 31,
      columnNumber: 5
    }
  },
  /* istanbul ignore next */
  (cov_xti19yhxy().b[4][0]++, !errorCall) &&
  /* istanbul ignore next */
  (cov_xti19yhxy().b[4][1]++, forks.length > 0) ?
  /* istanbul ignore next */
  (cov_xti19yhxy().b[3][0]++,
  /* istanbul ignore next */
  __jsx(
  /* istanbul ignore next */
  _react.default.Fragment,
  /* istanbul ignore next */
  null,
  /* istanbul ignore next */
  __jsx(
  /* istanbul ignore next */
  "span",
  /* istanbul ignore next */
  {
    className:
    /* istanbul ignore next */
    _ForksModule.
    /* istanbul ignore next */
    default.tag,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 11
    }
  },
  /* istanbul ignore next */
  "Forks:"), forks.map((fork, index) => {
    /* istanbul ignore next */
    cov_xti19yhxy().f[3]++;
    cov_xti19yhxy().s[15]++;
    return /* istanbul ignore next */__jsx(
    /* istanbul ignore next */
    "div",
    /* istanbul ignore next */
    {
      key: `${fork}-${index}`,
      className:
      /* istanbul ignore next */
      _ForksModule.
      /* istanbul ignore next */
      default.fork,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 36,
        columnNumber: 13
      }
    }, fork);
  }))) :
  /* istanbul ignore next */
  (cov_xti19yhxy().b[3][1]++,
  /* istanbul ignore next */
  __jsx(
  /* istanbul ignore next */
  _react.default.Fragment,
  /* istanbul ignore next */
  null)));
};
/* istanbul ignore next */
var _default = Forks;
/* istanbul ignore next */
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,