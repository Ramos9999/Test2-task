71b9f5c47cda95d5285dc75fe151a699
"use strict";

_getJestObj().mock('next/router', () => ({
  useRouter: jest.fn().mockReturnValue({
    query: {},
    push: jest.fn()
  })
}));
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _ = _interopRequireDefault(require("."));
var _jsxFileName = "C:\\Users\\DELL\\Desktop\\Test2-task\\components\\SearchPanel\\SearchPanel.test.tsx";
var __jsx = _react.default.createElement;
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
describe('SearchPanel', () => {
  it('should render correctly', () => {
    const {
      container
    } = (0, _react2.render)(__jsx(_.default, {
      placeHolder: '',
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 15,
        columnNumber: 34
      }
    }));
    expect(container.getElementsByClassName('container')[0]).toBeDefined();
    expect(container.getElementsByClassName('searchForm')[0]).toBeDefined();
    expect(container.getElementsByClassName('searchInput')[0]).toBeDefined();
    expect(container.getElementsByClassName('searchSubmit')[0]).toBeDefined();
  });
  it('should change the value of input when is changed', () => {
    (0, _react2.render)(__jsx(_.default, {
      placeHolder: '',
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 12
      }
    }));
    const input = _react2.screen.getByTestId('input-search');
    _react2.fireEvent.change(input, {
      target: {
        value: 'mcok value'
      }
    });
    _react2.fireEvent.click(_react2.screen.getByTestId('submit'));
    expect(input.getAttribute('value')).toBe('mcok value');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VSb3V0ZXIiLCJqZXN0IiwiZm4iLCJtb2NrUmV0dXJuVmFsdWUiLCJxdWVyeSIsInB1c2giLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfIiwiX2pzeEZpbGVOYW1lIiwiX19qc3giLCJkZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsImRlc2NyaWJlIiwiaXQiLCJjb250YWluZXIiLCJyZW5kZXIiLCJwbGFjZUhvbGRlciIsIl9fc2VsZiIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZXhwZWN0IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInRvQmVEZWZpbmVkIiwiaW5wdXQiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsImZpcmVFdmVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwiY2xpY2siLCJnZXRBdHRyaWJ1dGUiLCJ0b0JlIl0sInNvdXJjZXMiOlsiU2VhcmNoUGFuZWwudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xyXG5cclxuaW1wb3J0IFNlYXJjaFBhbmVsIGZyb20gJy4nO1xyXG5cclxuamVzdC5tb2NrKCduZXh0L3JvdXRlcicsICgpID0+ICh7XHJcbiAgdXNlUm91dGVyOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgIHF1ZXJ5OiB7fSxcclxuICAgIHB1c2g6IGplc3QuZm4oKSxcclxuICB9KSxcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ1NlYXJjaFBhbmVsJywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgcmVuZGVyIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPFNlYXJjaFBhbmVsIHBsYWNlSG9sZGVyPXsnJ30gLz4pO1xyXG5cclxuICAgIGV4cGVjdChjb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY29udGFpbmVyJylbMF0pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QoY29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NlYXJjaEZvcm0nKVswXSkudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChjb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2VhcmNoSW5wdXQnKVswXSkudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChjb250YWluZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2VhcmNoU3VibWl0JylbMF0pLnRvQmVEZWZpbmVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY2hhbmdlIHRoZSB2YWx1ZSBvZiBpbnB1dCB3aGVuIGlzIGNoYW5nZWQnLCAoKSA9PiB7XHJcbiAgICByZW5kZXIoPFNlYXJjaFBhbmVsIHBsYWNlSG9sZGVyPXsnJ30gLz4pO1xyXG5cclxuICAgIGNvbnN0IGlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdpbnB1dC1zZWFyY2gnKTtcclxuXHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlKGlucHV0LCB7XHJcbiAgICAgIHRhcmdldDogeyB2YWx1ZTogJ21jb2sgdmFsdWUnIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdzdWJtaXQnKSk7XHJcblxyXG4gICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnbWNvayB2YWx1ZScpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTztFQUM5QkMsU0FBUyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxD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